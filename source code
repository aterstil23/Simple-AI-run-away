#include "GLFW/glfw3.h"
#include <iostream>
#include <cmath>
#include <thread>
#include <windows.h>
/*(x, y) position of chaser and (x2, y2) position of chased object*/
float x = -0.75f;
float y = -0.75f;
float x2 = 0.0f;
float y2 = 0.0f;
float d = NULL;
int i = 0;
int j = 0;
bool key_right_pressed = false;
bool key_up_pressed = false;
bool key_left_pressed = false;
bool key_down_pressed = false;



/*determines the angle at which the object that runs away will run away*/
float angle(float x2, float x, float y2, float y) {

    float angle;
    if (x2 - x != 0) {
        float tan = (y2 - y) / (x2 - x);
        if (tan > 0) {
            if (x2 - x > 0) {
                angle = atan(tan);
            }
            else {
                angle = atan(tan) + 3.141592;
            }
        }
        else if (tan < 0) {
            if (x2 - x > 0) {
                angle = atan(tan);
            }
            else {
                angle = atan(tan) + 3.141592;
            }
        }
        else {
            if (x2 - x > 0) {
                angle = atan(tan);
            }
            else {
                angle = atan(tan) + 3.141592;
            }
        }
    }
    else {
        if (y2 - y > 0) {
            angle = 1.570796;
        }
        else if (y2 - y < 0) {
            angle = -1.570796;
        }
        else {
            angle = NULL;
        }
    }
    return angle;
}

/*measurs the distance travaled from a point (c, d) to a point (a, b)*/
float distance(float a, float b, float c, float d) {
    return sqrt(pow(a - b, 2) + pow(c - d, 2));
}

/*measures the variation in x that the object runs away depending on the distance dist traveled by the chaser and its position (ho, ve) from the object that runs away from (ho2, vw2) (ho for horizontal and ve for vertical)*/
float horunway(float dist, float ho2, float ho, float ve2, float ve) {
    float theta = angle(ho2, ho, ve2, ve);
    float resultho = dist * cos(theta);
    return resultho;
}

/*measures the variation of y of the chased object*/
float verunway(float dist, float ho2, float ho, float ve2, float ve) {
    float theta = angle(ho2, ho, ve2, ve);
    float resultve = dist * sin(theta);
    return resultve;
}

/*measures distance traveled each second by the chaser*/
float calculatedistance() {
    while (true) {
        float xold = x;
        float yold = y;
        Sleep(1000);
        float xnew = x;
        float ynew = y;
        d = distance(xnew, xold, ynew, yold);
        std::cout << d << std::endl;
        i++;
    }
}

/*update the position of the chased object every 1 second*/
float calculaterunaway() {
    while (true) {
        if (j < i) {
            j++;
        }
        std::cout << "i:" << i << " " << "j:" << j << std::endl;
        if (j == i) {
            x2 = x2 + (0.5f)*horunway(d, x2, x, y2, y);
            y2 = y2 + (0.5f)*verunway(d, x2, x, y2, y);
        }
        /*x2 = x2 + horunway(d, x2, x, y2, y);
        y2 = y2 + verunway(d, x2, x, y2, y);*/
        Sleep(1000);
    }
}

/*listen for key input*/
void key_callback(GLFWwindow* window, int key, int scancode, int action, int mods)
{   if (key == GLFW_KEY_RIGHT) {
        key_right_pressed = (action == GLFW_REPEAT || action == GLFW_PRESS );
    }
    if (key == GLFW_KEY_UP) {
        key_up_pressed = (action == GLFW_REPEAT || action == GLFW_PRESS );
    }
    if (key == GLFW_KEY_LEFT) {
        key_left_pressed = (action == GLFW_REPEAT || action == GLFW_PRESS);
    }
    if (key == GLFW_KEY_DOWN) {
        key_down_pressed = (action == GLFW_REPEAT || action == GLFW_PRESS);
    }
   
    
}

int main(void){
    std::thread thread1(calculatedistance);
    std::thread thread2(calculaterunaway);
    GLFWwindow* window;
   
    
    

    /* Initialize the library */
    if (!glfwInit())
        return -1;

    /* Create a windowed mode window and its OpenGL context */
    window = glfwCreateWindow(1500, 1500, "Hello World", NULL, NULL);
    glfwSetKeyCallback(window, key_callback);
    /*while (is_RIGHT_down && is_UP_down)
    {
        std::cout << "right and up repeat" << std::endl;

    }*/
    
    if (!window)
    {
        glfwTerminate();
        return -1;
    }

    /* Make the window's context current */
    glfwMakeContextCurrent(window);

    /* Loop until the user closes the window */
    while (!glfwWindowShouldClose(window))
    {
    /*depending on bool flags of key pressed listened by keycallback function, increment position of chaser*/
        if (key_right_pressed && key_up_pressed) {
            x+=0.005f;
            y+=0.005f;
        }
        else if (key_right_pressed && key_down_pressed) {
            x += 0.005f;
            y -= 0.005f;
        }
        else if (key_left_pressed && key_up_pressed) {
            x -= 0.005f;
            y += 0.005f;
        }
        else if (key_left_pressed && key_down_pressed) {
            x -= 0.005f;
            y -= 0.005f;
        }
        else if (key_right_pressed ) {
            x += 0.00707f;
        }
        else if (key_down_pressed) {
            y -= 0.00707f;
        }
        else if (key_left_pressed) {
            x -= 0.00707f;
        }
        else if (key_up_pressed) {
            y += 0.00707f;
        }
        /* Render here */
        glClear(GL_COLOR_BUFFER_BIT);

/*triangle object of chaser*/
        glBegin(GL_TRIANGLES);
        glVertex2f(x, y);
        glVertex2f(x+0.04f, y+0.08f);
        glVertex2f(x+0.08f, y);
        glEnd();

/*triangle object of object being chased/
        glBegin(GL_TRIANGLES);
        glVertex2f(x2, y2);
        glVertex2f(x2+0.04f, y2+0.08f);
        glVertex2f(x2+0.08f, y2);
        glEnd();
        /* Swap front and back buffers */
        glfwSwapBuffers(window);

        /* Poll for and process events */
        glfwPollEvents();
    }

    glfwTerminate();
    return 0;
}
